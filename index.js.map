{"mappings":";;;;;;;AAEO,KAAK,CAAC,yCAAmB,IAAI,KAAa,EAAE,QAA0C;QACzF,KAAK,EAAE,KAAK;QACZ,QAAQ,GAAG,CAA+B,GAAK,QAAQ,CAAE,CAAC,CAAC,MAAM,CAAuB,KAAK;;;AAG1F,KAAK,CAAC,yCAAkB,IAAI,KAAa,EAAE,QAA0C;QACxF,KAAK,EAAE,KAAK;QACZ,QAAQ,GAAG,CAA8B,GAAK,QAAQ,CAAE,CAAC,CAAC,MAAM,CAAsB,KAAK;;;AAGxF,KAAK,CAAC,yCAAqB,IAAI,KAAa,EAAE,QAA0C;QAC3F,KAAK,EAAE,KAAK;QACZ,QAAQ,GAAG,CAAiC,GAAK,QAAQ,CAAE,CAAC,CAAC,MAAM,CAAyB,KAAK","sources":["index.ts"],"sourcesContent":["import {Dispatch, FormEvent, SetStateAction} from \"react\";\n\nexport const getSelectStateProps = (state: string, setState: Dispatch<SetStateAction<string>>) => ({\n    value: state,\n    onChange: (e: FormEvent<HTMLSelectElement>) => setState((e.target as HTMLSelectElement).value),\n});\n\nexport const getInputStateProps = (state: string, setState: Dispatch<SetStateAction<string>>) => ({\n    value: state,\n    onChange: (e: FormEvent<HTMLInputElement>) => setState((e.target as HTMLInputElement).value),\n});\n\nexport const getTextAreaStateProps = (state: string, setState: Dispatch<SetStateAction<string>>) => ({\n    value: state,\n    onChange: (e: FormEvent<HTMLTextAreaElement>) => setState((e.target as HTMLTextAreaElement).value),\n});"],"names":[],"version":3,"file":"index.js.map"}